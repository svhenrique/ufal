{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TrabalhoS9.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "9IsRvcBkgWlr",
        "5PTjSjskg0Wi"
      ],
      "authorship_tag": "ABX9TyMmKEGHRZ8h8kDukf4UGwlQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/svhenrique/ufal/blob/main/PE/TrabalhoS9.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PylZx8HuaExi"
      },
      "source": [
        "# bibliotecas necessarias\n",
        "import numpy as np\n",
        "from sklearn.linear_model import LinearRegression\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MoBx11FrPQF_"
      },
      "source": [
        "## 2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1N0CwXb6eYz7"
      },
      "source": [
        "### a)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kBz5pECYebvz"
      },
      "source": [
        "Ao observar os dados é possível perceber que eles tem uma característica de uma variável independente e 3 variáveis dependentes, uma função de predição pode ser implementada usando uma técnica de machine learning chamada Multi Label Prediction, que usa regressão linear e, portanto, é adequado aos dados."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ak7eqpdwfUL7"
      },
      "source": [
        "### b)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "le86zk8rPOC6"
      },
      "source": [
        "# separando os dados em x e y\n",
        "x  = [[128], [256], [384], [512], [640], [768], [896], [1024]]\n",
        "y = [[386, 375, 393],\n",
        "     [850, 805, 824],\n",
        "     [1544,1644,1553], \n",
        "     [3035, 3123, 3235],\n",
        "     [6650, 6839, 6768],\n",
        "     [13887,14567,13456], \n",
        "     [28059,27439,27659],\n",
        "     [50916,52129,51360]]\n",
        "    "
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IAPbT3o_V99A",
        "outputId": "323a7c88-241b-4b2c-ba5f-ea42c2f3ec1d"
      },
      "source": [
        "# treinando modelo com Multi Label Prediction em uma Linear Regression\n",
        "modelo = LinearRegression()\n",
        "modelo.fit(x, y)"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K__m45eZZyNF",
        "outputId": "a0a09302-39a1-4c03-f674-756cee622278"
      },
      "source": [
        "# predicao\n",
        "predicao = modelo.predict(x)\n",
        "predicao"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-8934.08333333, -9048.75      , -8935.08333333],\n",
              "       [-2619.80952381, -2644.78571429, -2623.3452381 ],\n",
              "       [ 3694.46428571,  3759.17857143,  3688.39285714],\n",
              "       [10008.73809524, 10163.14285714, 10000.13095238],\n",
              "       [16323.01190476, 16567.10714286, 16311.86904762],\n",
              "       [22637.28571429, 22971.07142857, 22623.60714286],\n",
              "       [28951.55952381, 29375.03571429, 28935.3452381 ],\n",
              "       [35265.83333333, 35779.        , 35247.08333333]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "SLlrQ4dqZXZf",
        "outputId": "4957ea4f-29bc-4086-84e0-d86f04f8a784"
      },
      "source": [
        "# grafico do modelo de regressao\n",
        "plt.scatter(x, y1,  color='black')\n",
        "plt.plot(x, predicao, color='blue', linewidth=3)\n",
        "plt.show()"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9IsRvcBkgWlr"
      },
      "source": [
        "### c)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y0sC05TpgZ9C"
      },
      "source": [
        "R² = 0.744\n",
        "\n",
        "Sim, estou satisféito com meu modelo. Mesmo tendo multiplas variáveis Y para prever, o modelo conseguiu desempenhar boas predições."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5PTjSjskg0Wi"
      },
      "source": [
        "### d)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lAWXKTLdg1fa"
      },
      "source": [
        "Com uma confiança de 90%, é possível afirmar que ambos os parâmetros são significativos."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O5rzql-KhEci"
      },
      "source": [
        "### e)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9BciiUHHffaC",
        "outputId": "42bf0b80-5197-400a-ed4a-9a873b0e6a91"
      },
      "source": [
        "# testando os k-byts pedidos na questao\n",
        "teste = [[2**(20)]]\n",
        "saida = modelo.predict(teste)\n",
        "saida"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[51711282.69047621, 52445822.71428572, 51690511.65476193]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NWofLUa1hT4q",
        "outputId": "fba07ca4-b208-424d-e690-b508e5372ffb"
      },
      "source": [
        "# media das saidas\n",
        "print(f\"tempo medio: {sum(list(saida[0]))/3}\")"
      ],
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tempo medio: 51949205.68650795\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}
